<?php

/**
 * Controlador para la gestión de <%= @model_plural_name %>.
 *
 * @package Controladores
 * @author Antonio M. García del Río
 * @version 0.1
 * @access public
 */
class <%= @model_plural_name %>Controller extends SessionController {

  /**
   * Devuelve el listado de <%= @item_array_name %>.
   *
   * @param mixed $params=[]
   *
   * @return json
   */
  public static function index($params=[]) {
    self::check_api_token();
    $total_<%= @item_array_name %> = self::$USER->countOwn('<%= @item_name %>');
    $fields = [
      'id',
      'name',
      <%- if @model -%>
      <%- @model.list.each do |field,conf| -%>
      '<%= field %>',
      <%- end -%>
      <%- end -%>
    ];
    $fields = implode(',', $fields);
    $<%= @item_array_name %> = R::getAll("SELECT $fields FROM <%= @item_name %> WHERE user_id=?", [self::$USER->id]);

    self::json([
      'total_<%= @item_array_name %>' => $total_<%= @item_array_name %>,
      '<%= @item_array_name %>' => $<%= @item_array_name %>,
    ]);
  }

  /**
   * Devuelve los valores de un <%= @item_name %>.
   *
   * @param mixed $params=[]
   *
   * @return json
   */
  public static function get($params=[]) {
    self::check_api_token();
    $<%= @item_name %> = self::$USER->withCondition(' id = ? ', [$params['id']] )->own<%= @model_name %>List;
    if($<%= @item_name %>) {
      $<%= @item_name %> = reset($<%= @item_name %>);
      $total_<%= @item_array_name %> = $<%= @item_name %> ? 1:0;
      self::json([
        'total_<%= @item_array_name %>' => $total_<%= @item_array_name %>,
        '<%= @item_name %>' => [
          'id' => $<%= @item_name %>->id,
          'name' => $<%= @item_name %>->name,
          <%- if @model -%>
          <%- @model.form.each do |field,conf| -%>
          '<%= field %>' => $<%= @item_name %>-><%= field %>,
          <%- end -%>
          <%- end -%>
          'user_id' => $<%= @item_name %>->user_id,
        ],
      ]);
    } else {
      header("HTTP/1.0 401 Unauthorized");
      self::json([
        'msg' => 'YOU ARE NOT AUTHORIZED TO GET THIS RESOURCE',
        'total_<%= @item_array_name %>' => 0,
        '<%= @item_name %>' => [],
        '_SESSION' => $_SESSION,
        '_SERVER' => $_SERVER,
      ]);
    }
  }

  /**
   * Crea o modifica un <%= @item_name %>.
   *
   * @param mixed $params=[]
   *
   * @return json
   */
  public static function post($params=[]) {
    self::check_api_token();
    $json = file_get_contents('php://input');
    $data = json_decode($json);
    $id = intval($params['id']);
    if($id>0) {
      $mode = 'update';
      $<%= @item_name %> = self::$USER->withCondition(' id = ? ', [$params['id']] )->own<%= @model_name %>List;
      $<%= @item_name %> = reset($<%= @item_name %>);
    } else {
      $mode = 'create';
      $<%= @item_name %> = R::dispense('<%= @item_name %>');
      $<%= @item_name %>->user_id = self::$USER->id;
    }
    $total_<%= @item_array_name %> = $<%= @item_name %>->id>0 ? 1 : 0;
    if($<%= @item_name %>) {
      $fields = [
        'name',
        <%- if @model -%>
        <%- @model.form.each do |field,conf| -%>
        '<%= field %>',
        <%- end -%>
        <%- end -%>
      ];
      $fields = implode(',', $fields);
      $<%= @item_name %>->import( $data, $fields );
      R::store( $<%= @item_name %> );
      self::json([
        'total_<%= @item_array_name %>' => $total_<%= @item_array_name %>,
        'mode' => $mode,
        '<%= @item_name %>' => [
          'id' => $<%= @item_name %>->id,
          'name' => $<%= @item_name %>->name,
          <%- if @model -%>
          <%- @model.form.each do |field,conf| -%>
          '<%= field %>' => $<%= @item_name %>-><%= field %>,
          <%- end -%>
          <%- end -%>
        ],
        'data' => $data,
      ]);
    } else {
      header("HTTP/1.0 401 Unauthorized");
      self::json([
        'msg' => 'YOU ARE NOT AUTHORIZED TO UPDATE THIS RESOURCE',
        'mode' => $mode,
        'total_<%= @item_array_name %>' => 0,
        '<%= @item_name %>' => [],
        'data' => $data,
        '_SESSION' => $_SESSION,
        '_SERVER' => $_SERVER,
      ]);
    }
  }

  /**
   * Elimina un conjunto de <%= @item_array_name %>.
   *
   * @param string $data->action
   * @param string $data-><%= @item_name %>_ids
   *
   * @return json
   */
  public static function delete($params=[]) {
    self::check_api_token();
    $json = file_get_contents('php://input');
    $data = json_decode($json);
    if(isset($data->action) && $data->action=='delete') {
      if(isset($data-><%= @item_name %>_ids)) {
        $<%= @item_array_name %> = self::$USER->withCondition(
          'id in (' . R::genSlots( $data-><%= @item_name %>_ids ) . ')',
          $data-><%= @item_name %>_ids )->own<%= @model_name %>List;
        $ids = array_keys($<%= @item_array_name %>);
        R::trashAll( $<%= @item_array_name %> );
        self::json([
          'msg' => 'DELETE',
          'ids' => $ids,
        ]);
        die;
      } else {
        header("HTTP/1.0 400 Bad Request");
      }
    } else {
      header("HTTP/1.0 400 Bad Request");
    }
    self::json([
      'msg' => 'DELETE ERROR',
      'params' => $params,
      'data' => $data,
    ]);
  }
}
import ko from 'knockout'
import * as bootstrap from 'bootstrap'
import { App } from '../../app'

export interface <%= @model_name %>Options {
  id: number
  name: string
  <%- if @model -%>
  <%- @model.fields.each do |field,conf| -%>
  <%= field %>: any
  <%- end -%>
  <%- end -%>
}

export class <%= @model_name %> {
  static app:App
  static api_url = '/api/v1/<%= @item_array_name %>'

  static someSelected<%= @model_name %> = ko.pureComputed(() => {
    for(let _i in <%= @model_name %>.app.<%= @item_array_name %>()) {
      const item:<%= @model_name %> = <%= @model_name %>.app.<%= @item_array_name %>()[_i]
      if(item.selected()) {
        return true
      }
    }
    return false
  })

  static selected<%= @model_plural_name %> = ko.pureComputed(() => {
    return <%= @model_name %>.app.<%= @item_array_name %>().filter((item:<%= @model_name %>) => item.selected())
  })

  static deselectAll = (app:App, e:MouseEvent) => {
    console.log('<%= @model_name %> CLICK DESELCT ALL',e, e.altKey)
    for(let _i in <%= @model_name %>.app.<%= @item_array_name %>()) {
      const item:<%= @model_name %> = <%= @model_name %>.app.<%= @item_array_name %>()[_i]
      if(e.altKey) {
        item.selected(true)
      } else {
        item.selected(!item.selected())
      }
    }
  }

  static deleteSelected = (app:App, e:MouseEvent) => {
    if(!confirm('Are you sure you want to delete these items?')) {
      return false;
    }

    const body = {
      action: 'delete',
      <%= item_name %>_ids: <%= @model_name %>.selected<%= @model_plural_name %>().map((<%= item_name %>) => <%= item_name %>.id)
    }

    const url = `${<%= @model_name %>.api_url}/delete`
    const options = {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': 'API_TOKEN:' + <%= @model_name %>.app.api_token(),
      },
      body: JSON.stringify(body)
    }

    fetch(url,options).then((response) => {
      return response.json()
    }).then((data) => {
      if(data.msg=='DELETE') {
        <%= @model_name %>.app.<%= @item_array_name %>.remove( item => data.ids.includes(item.id) )
      }
    })
  }

  id: number
  name: ko.Observable<string>
  <%- if @model -%>
  <%- @model.fields.each do |field,conf| -%>
  <%= field %>: ko.Observable<any>
  <%- end -%>
  <%- end -%>

  selected: ko.Observable<boolean>

  constructor(options: <%= @model_name %>Options) {
    this.selected = ko.observable(false)
    this.id = options.id
    this.name = ko.observable(options.name)
    <%- if @model -%>
    <%- @model.fields.each do |field,conf| -%>
    this.<%= field %> = ko.observable(options.<%= field %>)
    <%- end -%>
    <%- end -%>
  }

  static new<%= @model_name %>(app:App,e:MouseEvent) {
    console.log('NEW <%= @model_name %> CLICK',app,e)
    const new_<%= item_name %> = new <%= @model_name %>({
      id:0,
      name:'',
      <%- if @model -%>
      <%- @model.fields.each do |field,conf| -%>
      <%= field %>:'',
      <%- end -%>
      <%- end -%>
    })
    app.selected<%= @model_name %>(new_<%= item_name %>)
  }

  static loadData(<%= @item_array_name %>:ko.ObservableArray<<%= @model_name %>>) {
    const options = {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': 'API_TOKEN:' + <%= @model_name %>.app.api_token(),
      }
    }
    fetch(<%= @model_name %>.api_url,options).then((response) => {
      return response.json()
    }).then((data) => {
      <%= @item_array_name %>([])
      data.<%= @item_array_name %>.forEach((<%= item_name %>:<%= @model_name %>Options) => {
        <%= @item_array_name %>.push(new <%= @model_name %>(<%= item_name %>))
      })
    })
  }

  select(this:App,self:<%= @model_name %>,e:MouseEvent) {
    this.selected<%= @model_name %>(null)
    const url = `${<%= @model_name %>.api_url}/${self.id}`
    const options = {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': 'API_TOKEN:' + <%= @model_name %>.app.api_token(),
      }
    }
    fetch(url,options).then((response) => {
      return response.json()
    }).then((data) => {
      console.log('<%= @model_name %> DATA', data)
      self.id = data.<%= item_name %>.id
      self.name(data.<%= item_name %>.name)
      <%- if @model -%>
      <%- @model.fields.each do |field,conf| -%>
      self.<%= field %>(data.<%= item_name %>.<%= field %>)
      <%- end -%>
      <%- end -%>
      this.selected<%= @model_name %>(self)
    })
  }

  cancel() {
    console.log('<%= @model_name %> CANCEL CLICK', this)
  }

  save(self:<%= @model_name %>, e:MouseEvent) {
    e.stopPropagation()
    e.preventDefault()
    console.log('<%= @model_name %> SAVE CLICK',e, this)
    const url = `${<%= @model_name %>.api_url}/${this.id}`
    const data = ko.toJSON(this)
    const options = {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': 'API_TOKEN:' + <%= @model_name %>.app.api_token(),
      },
      body: data
    }
    console.log('<%= @model_name %> POST', options)

    fetch(url,options).then((response) => {
      return response.json()
    }).then((data) => {
      console.log('<%= @model_name %> DATA POST', data)
      const modalElement = document.getElementById('<%= item_name %>Modal')
      const bsModal = (<any>bootstrap.Modal).getInstance(modalElement)
      if(data.mode=='create') {
        <%= @model_name %>.app.<%= @item_array_name %>.push(new <%= @model_name %>(data.<%= item_name %>))
      }
      bsModal.hide()
    })
  }

}